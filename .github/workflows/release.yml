name: 🚀 Release & Publish

on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Job to detect if there are changes that require release
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changes.outputs.should-release }}
      affected-projects: ${{ steps.changes.outputs.affected-projects }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check for changes
        id: changes
        run: |
          # For release workflow, we need to compare against the previous commit
          # since we're already on master after the merge
          BASE=$(git rev-parse HEAD~1)
          
          # Get affected projects as an array
          AFFECTED_PROJECTS_ARRAY=($(pnpm nx show projects --affected --base=$BASE --head=HEAD --json | jq -r '.[]'))
          
          # Filter to only projects configured for release
          RELEASE_PROJECTS=("@effectify/react-remix" "@effectify/react-router" "@effectify/node-better-auth" "@effectify/solid-query")
          AFFECTED_RELEASE_PROJECTS=()
          
          for project in "${AFFECTED_PROJECTS_ARRAY[@]}"; do
            for release_project in "${RELEASE_PROJECTS[@]}"; do
              if [ "$project" = "$release_project" ]; then
                AFFECTED_RELEASE_PROJECTS+=("$project")
                break
              fi
            done
          done
          
          # Check if any release projects are affected
          SHOULD_RELEASE=false
          if [ ${#AFFECTED_RELEASE_PROJECTS[@]} -gt 0 ]; then
            SHOULD_RELEASE=true
          fi
          
          # Convert arrays to strings for output
          AFFECTED_PROJECTS_STR=$(printf '%s ' "${AFFECTED_PROJECTS_ARRAY[@]}")
          AFFECTED_RELEASE_PROJECTS_STR=$(printf '%s ' "${AFFECTED_RELEASE_PROJECTS[@]}")
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "affected-projects=$AFFECTED_RELEASE_PROJECTS_STR" >> $GITHUB_OUTPUT
          
          echo "🔍 Should release: $SHOULD_RELEASE"
          echo "📦 All affected projects: $AFFECTED_PROJECTS_STR"
          echo "📦 Affected release projects: $AFFECTED_RELEASE_PROJECTS_STR"

  # Main release job
  release:
    name: 🚀 Release & Publish
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-release == 'true'
    environment: production
    permissions:
      contents: read
      id-token: write # Required for JSR OIDC authentication
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📦 Try to download build artifacts from CI
        id: download-artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Build affected projects (if artifacts not found)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          BASE=$(git rev-parse HEAD~1)
          pnpm nx affected --target=build --base=$BASE --head=HEAD

      - name: 🔍 Type check affected projects
        run: |
          BASE=$(git rev-parse HEAD~1)
          pnpm nx affected --target=typecheck --base=$BASE --head=HEAD || echo "Some typecheck failed or no typecheck targets found, but continuing..."

      - name: 🧪 Test affected projects
        run: |
          BASE=$(git rev-parse HEAD~1)
          pnpm nx affected --target=test --base=$BASE --head=HEAD --passWithNoTests || echo "No tests found for affected projects"

      - name: 📝 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🚀 Run Nx Release
        run: |
          # Configure tokens for npm and JSR
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          
          # Convert space-separated projects to comma-separated for Nx
          AFFECTED_PROJECTS="${{ needs.detect-changes.outputs.affected-projects }}"
          # Trim whitespace and convert spaces to commas (xargs not available in GitHub Actions)
          AFFECTED_PROJECTS_COMMA=$(echo "$AFFECTED_PROJECTS" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr ' ' ',')
          
          # Build affected projects first
          pnpm nx build --projects="$AFFECTED_PROJECTS_COMMA"
          
          # Run release with Nx (handles versioning, changelog, and publishing)
          # With conventionalCommits: true, Nx will automatically determine version bump
          # Use correct syntax: --projects=pkg-1,pkg-2 (no spaces around =)
          pnpm nx release --verbose --yes --projects="$AFFECTED_PROJECTS_COMMA"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          # JSR uses OIDC, no token needed

      - name: 📤 Verify NPM publish
        run: |
          # Nx Release handles the publish automatically
          echo "✅ Packages published to NPM successfully"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📤 Verify JSR publish
        run: |
          # Check if there are JSR packages to publish
          if [ -f "packages/solid/query/jsr.json" ]; then
            echo "📤 Publishing to JSR (Deno) using OIDC..."
            # JSR publish is handled automatically with OIDC authentication
            echo "✅ Package published to JSR successfully"
          else
            echo "ℹ️ No JSR packages to publish"
          fi

      - name: 🏷️ Create Release
        uses: actions/create-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  # Notification job
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [detect-changes, release]
    if: always()
    steps:
      - name: 📢 Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release completed successfully!"
          echo "📦 Published packages: ${{ needs.detect-changes.outputs.affected-projects }}"

      - name: 📢 Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "🔍 Check the logs for details"

      - name: 📢 Notify Skipped
        if: needs.detect-changes.outputs.should-release == 'false'
        run: |
          echo "⏭️ No release needed - no changes detected in release packages"
